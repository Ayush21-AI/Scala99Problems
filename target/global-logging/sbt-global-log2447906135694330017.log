[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\goura\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\goura\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 270.8758ms
[debug]       Load.loadUnit: defsScala took 0.5141ms
[debug] [Loading] Scanning directory C:\Users\goura\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\goura\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.301 ms
[debug]           Load.resolveProject(global-plugins) took 85.488ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\goura\.sbt\1.0\plugins, plugins: List(<none>))) took 132.8091ms
[debug] [Loading] Done in C:\Users\goura\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 157.7169ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4413ms
[debug]     Load.loadUnit(file:/C:/Users/goura/.sbt/1.0/plugins/, ...) took 449.6135ms
[debug]   Load.apply: load took 641.3871ms
[debug]   Load.apply: resolveProjects took 5.6457ms
[debug]   Load.apply: finalTransforms took 90.0982ms
[debug]   Load.apply: config.delegates took 9.8427ms
[debug]   Load.apply: Def.make(settings)... took 468.744ms
[debug]   Load.apply: structureIndex took 109.8747ms
[debug]   Load.apply: mkStreams took 1.7427ms
[info] loading global plugins from C:\Users\goura\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5438.9322ms
[debug]           Load.loadUnit: plugins took 35.427ms
[debug]           Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory C:\Users\goura\IdeaProjects\Scala99Problems\project
[debug]             Load.loadUnit: mkEval took 7.3404ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\goura\IdeaProjects\Scala99Problems\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.058 ms
[info] loading settings for project scala99problems-build from idea.sbt ...
[debug]               Load.resolveProject(scala99problems-build) took 4.0526ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala99problems-build, base: C:\Users\goura\IdeaProjects\Scala99Problems\project, plugins: List(<none>))) took 6.8118ms
[debug] [Loading] Done in C:\Users\goura\IdeaProjects\Scala99Problems\project, returning: (scala99problems-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2806.4254ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.2173ms
[debug]         Load.loadUnit(file:/C:/Users/goura/IdeaProjects/Scala99Problems/project/, ...) took 2848.4537ms
[debug]       Load.apply: load took 2850.9837ms
[debug]       Load.apply: resolveProjects took 0.139ms
[debug]       Load.apply: finalTransforms took 9.6807ms
[debug]       Load.apply: config.delegates took 0.4126ms
[debug]       Load.apply: Def.make(settings)... took 84.6388ms
[debug]       Load.apply: structureIndex took 27.8702ms
[debug]       Load.apply: mkStreams took 0.0052ms
[info] loading project definition from C:\Users\goura\IdeaProjects\Scala99Problems\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3716.6069ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\goura\IdeaProjects\Scala99Problems
[debug]       Load.loadUnit: mkEval took 0.768ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\goura\IdeaProjects\Scala99Problems, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2996 ms
[info] loading settings for project scala99problems from build.sbt ...
[debug]         Load.resolveProject(scala99problems) took 25.8944ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala99problems, base: C:\Users\goura\IdeaProjects\Scala99Problems, plugins: List(<none>))) took 28.1491ms
[debug] [Loading] Done in C:\Users\goura\IdeaProjects\Scala99Problems, returning: (scala99problems)
[debug]     Load.loadUnit: loadedProjectsRaw took 1886.1873ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.8453ms
[debug]   Load.loadUnit(file:/C:/Users/goura/IdeaProjects/Scala99Problems/, ...) took 5630.7465ms
[debug] Load.apply: load took 5632.345ms
[debug] Load.apply: resolveProjects took 0.1314ms
[debug] Load.apply: finalTransforms took 30.9282ms
[debug] Load.apply: config.delegates took 0.39ms
[debug] Load.apply: Def.make(settings)... took 76.5791ms
[debug] Load.apply: structureIndex took 30.2728ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to Scala99Problems (in build file:/C:/Users/goura/IdeaProjects/Scala99Problems/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64020 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64020, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala99Problems (in build file:/C:/Users/goura/IdeaProjects/Scala99Problems/)
[debug] > Exec(idea-shell, None, None)
